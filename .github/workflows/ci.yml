name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run linting
      run: |
        black --check src/ tests/
        flake8 src/ tests/
        pylint src/
        
    - name: Type checking
      run: mypy src/
      
    - name: Security scan
      run: |
        bandit -r src/
        safety check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Start LocalStack
      run: |
        docker run -d --name localstack -p 4566:4566 localstack/localstack
        sleep 10
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566

  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Terraform Format Check
      run: |
        cd infrastructure/terraform
        terraform fmt -check -recursive
        
    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init -backend=false
        
    - name: Terraform Validate
      run: |
        cd infrastructure/terraform
        terraform validate
        
    - name: Terraform Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: infrastructure/terraform
        framework: terraform

  lambda-packaging:
    name: Lambda Packaging Test
    runs-on: ubuntu-latest
    needs: [unit-tests, terraform-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Package Lambda functions
      run: |
        mkdir -p dist/
        cd src/lambda/cost_optimization
        zip -r ../../../dist/cost_optimizer.zip . -x "*.pyc" "*__pycache__*"
        
    - name: Upload Lambda packages
      uses: actions/upload-artifact@v3
      with:
        name: lambda-packages
        path: dist/*.zip

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Run performance benchmarks
      run: |
        python benchmark.py --output-format=json > performance_results.json
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_results.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, lambda-packaging, terraform-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Deploy infrastructure
      run: |
        cd infrastructure/terraform/environments/staging
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan
        
    - name: Download Lambda packages
      uses: actions/download-artifact@v3
      with:
        name: lambda-packages
        path: dist/
        
    - name: Deploy Lambda functions
      run: |
        aws lambda update-function-code \
          --function-name staging-cost-optimizer \
          --zip-file fileb://dist/cost_optimizer.zip

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, lambda-packaging, terraform-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Deploy infrastructure
      run: |
        cd infrastructure/terraform/environments/production
        terraform init
        terraform plan -out=tfplan
        terraform apply tfplan
        
    - name: Download Lambda packages
      uses: actions/download-artifact@v3
      with:
        name: lambda-packages
        path: dist/
        
    - name: Deploy Lambda functions
      run: |
        aws lambda update-function-code \
          --function-name production-cost-optimizer \
          --zip-file fileb://dist/cost_optimizer.zip
          
    - name: Run post-deployment tests
      run: |
        python scripts/testing/post_deployment_tests.py --environment=production

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#finops-platform'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
